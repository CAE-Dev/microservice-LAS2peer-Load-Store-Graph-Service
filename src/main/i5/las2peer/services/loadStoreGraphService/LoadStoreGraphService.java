package i5.las2peer.services.loadStoreGraphService;

import java.net.HttpURLConnection;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;

import com.fasterxml.jackson.core.JsonProcessingException;

import i5.las2peer.api.Service;
import i5.las2peer.restMapper.HttpResponse;
import i5.las2peer.restMapper.MediaType;
import i5.las2peer.restMapper.RESTMapper;
import i5.las2peer.restMapper.annotations.ContentParam;
import i5.las2peer.restMapper.annotations.Version;
import i5.las2peer.services.loadStoreGraphService.database.DatabaseManager;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.jaxrs.Reader;
import io.swagger.models.Swagger;
import io.swagger.util.Json;
import net.minidev.json.JSONObject;
import net.minidev.json.JSONValue;


/**
 * 
 * LAS2peer Load Store Graph Service
 * 
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 * 
 */
@Path("graphs")
@Version("0.1") // this annotation is used by the XML mapper
@Api
@SwaggerDefinition(
    info = @Info(title = "LAS2peer Load Store Graph Service", version = "0.1",
        description = "A LAS2peer microservice generated by the CAE.",
        termsOfService = "none",
        contact = @Contact(name = "Peter de Lange", email = "CAEAddress@gmail.com") ,
        license = @License(name = "BSD",
            url = "https://github.com/CAE-Community-Application-Editor/microservice-LAS2peer-Load-Store-Graph-Service/blob/master/LICENSE.txt") ) )
public class LoadStoreGraphService extends Service {


  /*
   * Database configuration
   */
  private String jdbcDriverClassName;
  private String jdbcLogin;
  private String jdbcPass;
  private String jdbcUrl;
  private String jdbcSchema;
  private DatabaseManager dbm;


  public LoadStoreGraphService() {
    // read and set properties values
    setFieldValues();
    // instantiate a database manager to handle database connection pooling and credentials
    dbm = new DatabaseManager(jdbcDriverClassName, jdbcLogin, jdbcPass, jdbcUrl, jdbcSchema);
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods.
  // //////////////////////////////////////////////////////////////////////////////////////


  /**
   * 
   * getGraphList
   * 
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "internalError"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "graphListAsJsonArray"),
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "noGraphExists")
  })
  @ApiOperation(value = "getGraphList", notes = "")
  public HttpResponse getGraphList() {
    // internalError
    boolean internalError_condition = true;
    if(internalError_condition) {
      String er = "Some String";
      HttpResponse internalError = new HttpResponse(er, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return internalError;
    }
    // graphListAsJsonArray
    boolean graphListAsJsonArray_condition = true;
    if(graphListAsJsonArray_condition) {
      JSONObject graphList = new JSONObject();
      HttpResponse graphListAsJsonArray = new HttpResponse(graphList.toJSONString(), HttpURLConnection.HTTP_OK);
      return graphListAsJsonArray;
    }
    // noGraphExists
    boolean noGraphExists_condition = true;
    if(noGraphExists_condition) {
      String er = "Some String";
      HttpResponse noGraphExists = new HttpResponse(er, HttpURLConnection.HTTP_NOT_FOUND);
      return noGraphExists;
    }
    return null;
  }


  /**
   * 
   * loadGraph
   * 
   * @param id a String
   * 
   * @return HttpResponse
   * 
   */
  @GET
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_NOT_FOUND, message = "graphNotFound"),
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "graphLoaded"),
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "internalError")
  })
  @ApiOperation(value = "loadGraph", notes = "")
  public HttpResponse loadGraph(@PathParam("id") String id) {
    // graphNotFound
    boolean graphNotFound_condition = true;
    if(graphNotFound_condition) {
      String er = "Some String";
      HttpResponse graphNotFound = new HttpResponse(er, HttpURLConnection.HTTP_NOT_FOUND);
      return graphNotFound;
    }
    // graphLoaded
    boolean graphLoaded_condition = true;
    if(graphLoaded_condition) {
      JSONObject r = new JSONObject();
      HttpResponse graphLoaded = new HttpResponse(r.toJSONString(), HttpURLConnection.HTTP_OK);
      return graphLoaded;
    }
    // internalError
    boolean internalError_condition = true;
    if(internalError_condition) {
      String er = "Some String";
      HttpResponse internalError = new HttpResponse(er, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return internalError;
    }
    return null;
  }


  /**
   * 
   * storeGraph
   * 
   * @param graph a JSONObject
   * 
   * @return HttpResponse
   * 
   */
  @POST
  @Path("/")
  @Produces(MediaType.TEXT_PLAIN)
  @Consumes(MediaType.APPLICATION_JSON)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = "internalError"),
       @ApiResponse(code = HttpURLConnection.HTTP_CREATED, message = "graphStored")
  })
  @ApiOperation(value = "storeGraph", notes = "")
  public HttpResponse storeGraph(@ContentParam String graph) {
    JSONObject graph_JSON = (JSONObject) JSONValue.parse(graph);
    // internalError
    boolean internalError_condition = true;
    if(internalError_condition) {
      String er = "Some String";
      HttpResponse internalError = new HttpResponse(er, HttpURLConnection.HTTP_INTERNAL_ERROR);
      return internalError;
    }
    // graphStored
    boolean graphStored_condition = true;
    if(graphStored_condition) {
      String r = "Some String";
      HttpResponse graphStored = new HttpResponse(r, HttpURLConnection.HTTP_CREATED);
      return graphStored;
    }
    return null;
  }


  // //////////////////////////////////////////////////////////////////////////////////////
  // Methods required by the LAS2peer framework.
  // //////////////////////////////////////////////////////////////////////////////////////

  
  /**
   * 
   * This method is needed for every RESTful application in LAS2peer. Please don't change.
   * 
   * @return the mapping
   * 
   */
  public String getRESTMapping() {
    String result = "";
    try {
      result = RESTMapper.getMethodsAsXML(this.getClass());
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }


  /**
   * 
   * Returns the API documentation of all annotated resources for purposes of Swagger documentation.
   * 
   * @return The resource's documentation
   * 
   */
  @GET
  @Path("/swagger.json")
  @Produces(MediaType.APPLICATION_JSON)
  public HttpResponse getSwaggerJSON() {
    Swagger swagger = new Reader(new Swagger()).read(this.getClass());
    if (swagger == null) {
      return new HttpResponse("Swagger API declaration not available!",
          HttpURLConnection.HTTP_NOT_FOUND);
    }
    try {
      return new HttpResponse(Json.mapper().writeValueAsString(swagger), HttpURLConnection.HTTP_OK);
    } catch (JsonProcessingException e) {
      e.printStackTrace();
      return new HttpResponse(e.getMessage(), HttpURLConnection.HTTP_INTERNAL_ERROR);
    }
  }

}
